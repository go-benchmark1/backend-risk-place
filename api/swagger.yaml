basePath: /
definitions:
  entities.EventState:
    enum:
    - pending
    - in_review
    - finished
    - in_progress
    - in_resolution
    - closed
    - false_alarm
    - false_alert
    type: string
    x-enum-varnames:
    - Pending
    - InReview
    - Finished
    - InProgress
    - InResolution
    - Closed
    - FalseAlarm
    - FalseAlert
  entities.NullTime:
    properties:
      time:
        type: string
      valid:
        type: boolean
    type: object
  entities.Warning:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/entities.NullTime'
      event_state:
        $ref: '#/definitions/entities.EventState'
      fact:
        type: string
      id:
        type: string
      is_anonymous:
        type: boolean
      is_victim:
        type: boolean
      latitude:
        type: number
      longitude:
        type: number
      reported_by:
        type: string
      stop_alerting:
        type: boolean
      updated_at:
        type: string
    type: object
  erfce.CreateErfceDTO:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  erfce.DTO:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  erfce.LoginDTO:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  erfce.UpdateErfceDTO:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  rest.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  rest.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  user.CreateUserDTO:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      phone:
        type: string
    type: object
  user.DTO:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
      phone:
        type: string
      warnings:
        items:
          $ref: '#/definitions/entities.Warning'
        type: array
    type: object
  user.LoginDTO:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  user.UpdateUserDTO:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      phone:
        type: string
    type: object
  warning_usecase.DTO:
    properties:
      event_state:
        type: string
      fact:
        type: string
      id:
        type: string
      is_anonymous:
        type: boolean
      is_victim:
        type: boolean
      latitude:
        type: number
      longitude:
        type: number
      reported_by:
        type: string
      stop_alerting:
        type: boolean
    type: object
  warning_usecase.UpdateWarningDTO:
    properties:
      event_state:
        type: string
      fact:
        type: string
      is_anonymous:
        type: boolean
      is_victim:
        type: boolean
      latitude:
        type: string
      longitude:
        type: string
      reported_by:
        type: string
      stop_alerting:
        type: boolean
    type: object
info:
  contact:
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server Risk Place Angola server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Risk Place Angola API
  version: 1.0.0
paths:
  /:
    get:
      consumes:
      - application/json
      description: Home page of the API server of Risk Place Angola
      produces:
      - application/json
      responses:
        "200":
          description: Hello, Angola!
          schema:
            type: string
      summary: Home
      tags:
      - Home
  /api/v1/erfce:
    get:
      consumes:
      - application/json
      description: Find All Erfce
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/erfce.DTO'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Find All Erfce
      tags:
      - Erfce
    post:
      consumes:
      - application/json
      description: Create Erfce
      parameters:
      - description: Erfce
        in: body
        name: erfce
        required: true
        schema:
          $ref: '#/definitions/erfce.CreateErfceDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/erfce.DTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Create Erfce
      tags:
      - Erfce
  /api/v1/erfce/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Erfce
      parameters:
      - description: Erfce ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Delete Erfce
      tags:
      - Erfce
    get:
      consumes:
      - application/json
      description: Find Erfce By ID
      parameters:
      - description: Erfce ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/erfce.DTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Find Erfce By ID
      tags:
      - Erfce
    put:
      consumes:
      - application/json
      description: Update Erfce
      parameters:
      - description: Erfce ID
        in: path
        name: id
        required: true
        type: string
      - description: Erfce
        in: body
        name: erfce
        required: true
        schema:
          $ref: '#/definitions/erfce.UpdateErfceDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/erfce.DTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Update Erfce
      tags:
      - Erfce
  /api/v1/erfce/login:
    post:
      consumes:
      - application/json
      description: Login Erfce
      parameters:
      - description: Erfce
        in: body
        name: erfce
        required: true
        schema:
          $ref: '#/definitions/erfce.LoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/erfce.DTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Login Erfce
      tags:
      - Erfce
  /api/v1/erfce/warning:
    get:
      consumes:
      - application/json
      description: Find All Erfce Warnings
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/erfce.DTO'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Find All Erfce Warnings
      tags:
      - Erfce
  /api/v1/erfce/warning/{id}:
    get:
      consumes:
      - application/json
      description: Find Erfce Warnings By ID
      parameters:
      - description: Erfce ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/erfce.DTO'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Find Erfce Warnings By ID
      tags:
      - Erfce
  /api/v1/user:
    get:
      consumes:
      - application/json
      description: Find All User
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/user.DTO'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Find All User
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Create User
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.CreateUserDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/user.DTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Create User
      tags:
      - User
  /api/v1/user/{id}:
    delete:
      consumes:
      - application/json
      description: Delete User
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rest.SuccessResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Delete User
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Find User By ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.DTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Find User By ID
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update User
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.UpdateUserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.DTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Update User
      tags:
      - User
  /api/v1/user/login:
    post:
      consumes:
      - application/json
      description: Login User
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.LoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.DTO'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Login User
      tags:
      - User
  /api/v1/user/warning:
    get:
      consumes:
      - application/json
      description: Find All User Warnings
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/user.DTO'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Find All User Warnings
      tags:
      - User
  /api/v1/user/warning/{id}:
    get:
      consumes:
      - application/json
      description: Find User Warnings By ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/user.DTO'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/rest.ErrorResponse'
      summary: Find User Warnings By ID
      tags:
      - User
  /api/v1/warning:
    get:
      consumes:
      - application/json
      description: Find all warnings
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/warning_usecase.DTO'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Find all warnings
      tags:
      - Warning
    post:
      consumes:
      - application/json
      description: Create a warning
      parameters:
      - description: Reported by
        in: formData
        name: reported_by
        required: true
        type: string
      - description: Latitude
        in: formData
        name: latitude
        required: true
        type: string
      - description: Longitude
        in: formData
        name: longitude
        required: true
        type: string
      - description: Fact
        in: formData
        name: fact
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Create a warning
      tags:
      - Warning
  /api/v1/warning/{id}:
    delete:
      consumes:
      - application/json
      description: Remove warning
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Remove warning
      tags:
      - Warning
    get:
      consumes:
      - application/json
      description: Find warning by ID
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/warning_usecase.DTO'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Find warning by ID
      tags:
      - Warning
    put:
      consumes:
      - application/json
      description: Update a warning
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: string
      - description: Update Warning
        in: body
        name: update_warning
        required: true
        schema:
          $ref: '#/definitions/warning_usecase.UpdateWarningDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/warning_usecase.UpdateWarningDTO'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Update a warning
      tags:
      - Warning
  /ws:
    get:
      consumes:
      - application/json
      description: websocket url ws://host/ws or use authentication ssl wss://host/ws
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Websocket server
      tags:
      - Websocket
swagger: "2.0"
